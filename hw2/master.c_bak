/*
 * Code reference: http://www.gnu.org/software/libc/manual/html_node/Argp-Example-3.html#Argp-Example-3
 */

#include "master.h"
#include <stdio.h>
#include <argp.h>
#include <stdlib.h>


const char *argp_program_version =
  "mt_exponential_computation 1.0";

/* Program documentation. */
static char doc[] =
  "";

/* A description of the arguments we accept. */
static char args_doc[] = "--worker_path WORKER_PATH --wait_mechanism MECHANISM -x X -n N";

/* The options we understand. */
static struct argp_option options[] = {
  {"worker_path", 0, 0, 0, "The path of the worker binary."},
  {"wait_mechanism", 0, 0, 0, "One of sequential, select, poll or epoll"},
  {"x", 'x', 0, 0, "Exponent."},
  {"n", 'n', 0, 0, "Number of elements."},
  { 0 }
};

/* Used by main to communicate with parse_opt. */
struct arguments
{
  char *worker_path;                /* arg1 & arg2 */
  int wait_mech, exponent, n;
};

/* Parse a single option. */
static error_t parse_opt (int key, char *arg, struct argp_state *state)
{
  struct arguments *arguments = state->input;

  switch (key)
    {
    case 'q': case 's':
      arguments->silent = 1;
      break;
    case 'v':
      arguments->verbose = 1;
      break;
    case 'o':
      arguments->output_file = arg;
      break;

    case ARGP_KEY_ARG:
      if (state->arg_num >= 2)
        /* Too many arguments. */
        argp_usage (state);

      arguments->args[state->arg_num] = arg;

      break;

    case ARGP_KEY_END:
      if (state->arg_num < 2)
        /* Not enough arguments. */
        argp_usage (state);
      break;

    default:
      return ARGP_ERR_UNKNOWN;
    }
  return 0;
}

/* Our argp parser. */
static struct argp argp = { options, parse_opt, args_doc, doc };

int
main (int argc, char **argv)
{
  struct arguments arguments;

  /* Default values. */
  arguments.worker_path = "./worker";
  arguments.wait_mech = 0;
  arguments.exponent = 2;
  arguments.n = 12;

  /* Parse our arguments; every option seen by parse_opt will
     be reflected in arguments. */
  argp_parse (&argp, argc, argv, 0, 0, &arguments);

  printf ("ARG1 = %s\nARG2 = %s\nOUTPUT_FILE = %s\n"
          "VERBOSE = %s\nSILENT = %s\n",
          arguments.args[0], arguments.args[1],
          arguments.output_file,
          arguments.verbose ? "yes" : "no",
          arguments.silent ? "yes" : "no");

  exit (0);
}
